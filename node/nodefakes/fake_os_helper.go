// Code generated by counterfeiter. DO NOT EDIT.
package nodefakes

import (
	"sync"

	"github.com/jeffpak/local-node-plugin/node"
)

type FakeOsHelper struct {
	UmaskStub        func(mask int) (oldmask int)
	umaskMutex       sync.RWMutex
	umaskArgsForCall []struct {
		mask int
	}
	umaskReturns struct {
		result1 int
	}
	umaskReturnsOnCall map[int]struct {
		result1 int
	}
	MountStub        func(srcPath string, targetPath string) error
	mountMutex       sync.RWMutex
	mountArgsForCall []struct {
		srcPath    string
		targetPath string
	}
	mountReturns struct {
		result1 error
	}
	mountReturnsOnCall map[int]struct {
		result1 error
	}
	IsMountedStub        func(targetPath string) (bool, error)
	isMountedMutex       sync.RWMutex
	isMountedArgsForCall []struct {
		targetPath string
	}
	isMountedReturns struct {
		result1 bool
		result2 error
	}
	isMountedReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	UnmountStub        func(targetPath string) error
	unmountMutex       sync.RWMutex
	unmountArgsForCall []struct {
		targetPath string
	}
	unmountReturns struct {
		result1 error
	}
	unmountReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOsHelper) Umask(mask int) (oldmask int) {
	fake.umaskMutex.Lock()
	ret, specificReturn := fake.umaskReturnsOnCall[len(fake.umaskArgsForCall)]
	fake.umaskArgsForCall = append(fake.umaskArgsForCall, struct {
		mask int
	}{mask})
	fake.recordInvocation("Umask", []interface{}{mask})
	fake.umaskMutex.Unlock()
	if fake.UmaskStub != nil {
		return fake.UmaskStub(mask)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.umaskReturns.result1
}

func (fake *FakeOsHelper) UmaskCallCount() int {
	fake.umaskMutex.RLock()
	defer fake.umaskMutex.RUnlock()
	return len(fake.umaskArgsForCall)
}

func (fake *FakeOsHelper) UmaskArgsForCall(i int) int {
	fake.umaskMutex.RLock()
	defer fake.umaskMutex.RUnlock()
	return fake.umaskArgsForCall[i].mask
}

func (fake *FakeOsHelper) UmaskReturns(result1 int) {
	fake.UmaskStub = nil
	fake.umaskReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeOsHelper) UmaskReturnsOnCall(i int, result1 int) {
	fake.UmaskStub = nil
	if fake.umaskReturnsOnCall == nil {
		fake.umaskReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.umaskReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeOsHelper) Mount(srcPath string, targetPath string) error {
	fake.mountMutex.Lock()
	ret, specificReturn := fake.mountReturnsOnCall[len(fake.mountArgsForCall)]
	fake.mountArgsForCall = append(fake.mountArgsForCall, struct {
		srcPath    string
		targetPath string
	}{srcPath, targetPath})
	fake.recordInvocation("Mount", []interface{}{srcPath, targetPath})
	fake.mountMutex.Unlock()
	if fake.MountStub != nil {
		return fake.MountStub(srcPath, targetPath)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.mountReturns.result1
}

func (fake *FakeOsHelper) MountCallCount() int {
	fake.mountMutex.RLock()
	defer fake.mountMutex.RUnlock()
	return len(fake.mountArgsForCall)
}

func (fake *FakeOsHelper) MountArgsForCall(i int) (string, string) {
	fake.mountMutex.RLock()
	defer fake.mountMutex.RUnlock()
	return fake.mountArgsForCall[i].srcPath, fake.mountArgsForCall[i].targetPath
}

func (fake *FakeOsHelper) MountReturns(result1 error) {
	fake.MountStub = nil
	fake.mountReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeOsHelper) MountReturnsOnCall(i int, result1 error) {
	fake.MountStub = nil
	if fake.mountReturnsOnCall == nil {
		fake.mountReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.mountReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeOsHelper) IsMounted(targetPath string) (bool, error) {
	fake.isMountedMutex.Lock()
	ret, specificReturn := fake.isMountedReturnsOnCall[len(fake.isMountedArgsForCall)]
	fake.isMountedArgsForCall = append(fake.isMountedArgsForCall, struct {
		targetPath string
	}{targetPath})
	fake.recordInvocation("IsMounted", []interface{}{targetPath})
	fake.isMountedMutex.Unlock()
	if fake.IsMountedStub != nil {
		return fake.IsMountedStub(targetPath)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.isMountedReturns.result1, fake.isMountedReturns.result2
}

func (fake *FakeOsHelper) IsMountedCallCount() int {
	fake.isMountedMutex.RLock()
	defer fake.isMountedMutex.RUnlock()
	return len(fake.isMountedArgsForCall)
}

func (fake *FakeOsHelper) IsMountedArgsForCall(i int) string {
	fake.isMountedMutex.RLock()
	defer fake.isMountedMutex.RUnlock()
	return fake.isMountedArgsForCall[i].targetPath
}

func (fake *FakeOsHelper) IsMountedReturns(result1 bool, result2 error) {
	fake.IsMountedStub = nil
	fake.isMountedReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeOsHelper) IsMountedReturnsOnCall(i int, result1 bool, result2 error) {
	fake.IsMountedStub = nil
	if fake.isMountedReturnsOnCall == nil {
		fake.isMountedReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.isMountedReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeOsHelper) Unmount(targetPath string) error {
	fake.unmountMutex.Lock()
	ret, specificReturn := fake.unmountReturnsOnCall[len(fake.unmountArgsForCall)]
	fake.unmountArgsForCall = append(fake.unmountArgsForCall, struct {
		targetPath string
	}{targetPath})
	fake.recordInvocation("Unmount", []interface{}{targetPath})
	fake.unmountMutex.Unlock()
	if fake.UnmountStub != nil {
		return fake.UnmountStub(targetPath)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.unmountReturns.result1
}

func (fake *FakeOsHelper) UnmountCallCount() int {
	fake.unmountMutex.RLock()
	defer fake.unmountMutex.RUnlock()
	return len(fake.unmountArgsForCall)
}

func (fake *FakeOsHelper) UnmountArgsForCall(i int) string {
	fake.unmountMutex.RLock()
	defer fake.unmountMutex.RUnlock()
	return fake.unmountArgsForCall[i].targetPath
}

func (fake *FakeOsHelper) UnmountReturns(result1 error) {
	fake.UnmountStub = nil
	fake.unmountReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeOsHelper) UnmountReturnsOnCall(i int, result1 error) {
	fake.UnmountStub = nil
	if fake.unmountReturnsOnCall == nil {
		fake.unmountReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unmountReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeOsHelper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.umaskMutex.RLock()
	defer fake.umaskMutex.RUnlock()
	fake.mountMutex.RLock()
	defer fake.mountMutex.RUnlock()
	fake.isMountedMutex.RLock()
	defer fake.isMountedMutex.RUnlock()
	fake.unmountMutex.RLock()
	defer fake.unmountMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeOsHelper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ node.OsHelper = new(FakeOsHelper)
